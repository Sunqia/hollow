#!/usr/bin/env python

from __future__ import division,print_function,absolute_import
from hollow import *
from geode import *
import sys

def make_props(**kwargs):
  props = PropManager()
  props.add('output','').set_abbrev('o').set_required(1)
  props.add('petsc','')
  props.add('youngs_modulus',1e4)
  props.add('poissons_ratio',.45)
  props.add('density',1000.)
  props.add_existing(Prop('resolution',(50,10,1),shape=(-1,))
    .set_help('resolution along, around, and across (length, circle, thickness)'))
  props.add('bend',180.).set_help('tube bend angle in degrees')
  props.add('length',5.).set_help('tube length')
  props.add('bend_radius',-1.).set_help('bending radius (defaults to length/angle)')
  props.add('rest_bend_radius',inf).set_help('rest bending radius of tube')
  props.add('radius',1.).set_help('tube outer radius')
  props.add('thickness',.1).set_help('tube thickness')
  props.add('degree',2).set_help('nurbs geometry degree')
  props.add('deform',True).set_help('set to false to see rest geometry')
  for k,v in kwargs.items():
    props.get(k).set(v)
  return props

def geometry_file(props):
  return os.path.join(props.output(),'geom.nurbs')

def boundary_file(props):
  return os.path.join(props.output(),'boundary.vec')

def large_bend(X,radius,extra=0):
  if not isfinite(radius):
    return X
  br = X[...,0]+radius
  z = X[...,2]
  bt = (z-extra/2)/radius
  B = empty_like(X)
  B[...,0] = br*cos(clamp(bt,0,pi))
  B[...,1] = X[...,1]
  a = abs(bt-pi/2)<pi/2
  B[...,2] = a*br*sin(bt)-(1-a)*radius*(abs(bt-pi/2)-pi/2)
  return B

def set_geometry(props,iga):
  geom = geometry_file(props)
  if not iga.comm.rank:
    import igakit.cad
    import igakit.io

    # Create geometry
    length = props.length()
    n = props.resolution()
    assert len(n) in (1,3)
    if len(n)==1:
      n = ceil(array([length,2*pi*props.radius(),props.thickness()])/length*n[0]).astype(int)
    tube = igakit.cad.grid(shape=n,degree=props.degree(),
                           limits=((0,length),
                                   (0,2*pi),
                                   (0,props.thickness())))
    tube.unclamp(1) # Make middle dimension periodic
    X = tube.control[...,:3]
    z,t,r = rollaxis(X,-1).copy()
    r = props.radius()-r # [0,thick] -> [R-thick,R]
    X[...,0] = r*cos(t)
    X[...,1] = r*sin(t)
    X[...,2] = z
    base = X.copy()
    X[:] = large_bend(base,props.rest_bend_radius())
    Log.write('resolution = %s, X.shape = %s'%(n,X.shape))

    def esin(t):
      a = t<0
      b = t>pi
      return a*t+(1-a-b)*sin(t)+b*(pi-t)

    # Create boundary condition field
    if props.deform():
      angle = pi/180*props.bend()
      bend_radius = props.bend_radius()
      if bend_radius < 0:
        bend_radius = length/angle
      Log.write('bend radius = %g (base %g)'%(bend_radius,length/angle))
      extra = length-angle*bend_radius
      Log.write('extra length = %g'%extra)
      assert extra>=-1e-4
      B = large_bend(base,bend_radius,extra)
    else:
      B = X

    # Write
    igakit.io.PetIGA().write(geom,tube)
    igakit.io.PetIGA().write_vec(boundary_file(props),B,nurbs=tube)

  # Read into the iga object
  iga.periodic = 0,1,0
  iga.read(geom)

def solve(props):
  output = props.output()
  try:
    os.makedirs(output)
  except OSError:
    pass
  assert os.path.isdir(output)

  petsc_initialize('Bent tube',[sys.argv[0]]+('''
    -tao_monitor -tao_converged_reason -tao_type tao_nls
    -tao_nls_ksp_type petsc -ksp_type minres
    -tao_max_it 200 -ksp_max_it 200
    -iga_view -ksp_converged_reason -info %s/info
    '''%output).split())

  comm = petsc_comm_world()
  if comm.rank:
    Log.configure('bent tube',1,1,0)
  else:
    Log.cache_initial_output()
    Log.configure('bent tube',0,0,100)
    Log.copy_to_file(output+'/log',False)
    Log.write('command = %s'%parser.command(props))

  petsc_add_options([sys.argv[0]]+props.petsc().split())
  d = 3
  material = props.youngs_modulus(),props.poissons_ratio()
  rho_g = 0
  iga = NeoHookeanElasticIGA[d](comm,material,rho_g)

  # Create geometry
  set_geometry(props,iga)

  # Finish setup
  iga.set_from_options()
  iga.set_up()

  # Boundary conditions
  x = iga.read_vec(boundary_file(props))
  dummy = 17 # Overwritten by set_fix_table below
  for axis in 0,2:
    for side in 0,1:
      for i in xrange(d):
        if axis==0:
          iga.set_boundary_value(axis,side,i,i)
  iga.set_fix_table(x)

  # Solve
  tao = iga.create_tao()
  iteration = [0]
  def monitor():
    i = iteration[0]
    name = os.path.join(output,'x.%d'%i)
    with Log.scope('write %d'%i):
      iga.write_vec(name,x)
      open(os.path.join(output,'last_frame'),'w').write('%d\n'%i)
    iteration[0] += 1
  tao.add_monitor(monitor)
  tao.set_from_options()
  tao.set_initial_vector(x)
  tao.solve()

if __name__=='__main__':
  props = make_props()
  parser.parse(props,'Bent tube')
  solve(props)
