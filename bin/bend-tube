#!/usr/bin/env python

from __future__ import division,print_function,absolute_import
from hollow import *
from geode import *
import sys

def make_props(**kwargs):
  props = PropManager()
  props.add('output','').set_abbrev('o').set_required(1)
  props.add('petsc','')
  props.add('youngs_modulus',1e4)
  props.add('poissons_ratio',.45)
  props.add('density',1000.)
  props.add('view',False)
  props.add('resolution',(50,10,1)).set_help('resolution along, around, and across (length, circle, thickness)')
  props.add('bend',180.).set_help('tube bend angle in degrees')
  props.add('length',5.).set_help('tube length')
  props.add('radius',1.).set_help('tube outer radius')
  props.add('thickness',.1).set_help('tube thickness')
  props.add('degree',2).set_help('nurbs geometry degree')
  props.add('frame',10000).set_help('frame to view')
  props.add('color','strain').set_allowed('none strain'.split()).set_help('color mode')
  props.add('wire',1).set_help('wireframeness: 0 for none, 1 for some, 2 for a lot')
  for k,v in kwargs.items():
    props.get(k).set(v)
  return props

def geometry_file(props):
  return os.path.join(props.output(),'geom.nurbs')

def boundary_file(props):
  return os.path.join(props.output(),'boundary.vec')

def set_geometry(props,iga):
  geom = geometry_file(props)
  if not iga.comm.rank:
    import igakit.cad
    import igakit.io

    # Create geometry
    length = props.length()
    n = props.resolution()
    tube = igakit.cad.grid(shape=n,degree=props.degree(),
                           limits=((0,length),
                                   (0,2*pi),
                                   (0,props.thickness())))
    tube.unclamp(1) # Make middle dimension periodic
    X = tube.control[...,:3]
    z,t,r = rollaxis(X,-1).copy()
    r = props.radius()-r # [0,thick] -> [R-thick,R]
    X[...,0] = r*cos(t)
    X[...,1] = r*sin(t)
    X[...,2] = z
    Log.write('resolution = %s, X.shape = %s'%(n,X.shape))

    # Create boundary condition field
    angle = pi/180*props.bend()
    Log.write('bend radius = %g'%(length/angle))
    br = X[...,0]+length/angle
    bt = angle/length*X[...,2]
    B = empty_like(X)
    B[...,0] = br*cos(bt)
    B[...,1] = X[...,1]
    B[...,2] = br*sin(bt)

    # Write
    igakit.io.PetIGA().write(geom,tube)
    igakit.io.PetIGA().write_vec(boundary_file(props),B,nurbs=tube)

  # Read into the iga object
  iga.periodic = 0,1,0
  iga.read(geom)

def solve(props):
  output = props.output()
  try:
    os.makedirs(output)
  except OSError:
    pass
  assert os.path.isdir(output)

  petsc_initialize('Bent tube',[sys.argv[0]]+('''
    -tao_monitor -tao_converged_reason -tao_type tao_nls -tao_nls_ksp_type cg
    -tao_max_it 200 -ksp_max_it 200
    -iga_view -ksp_converged_reason -info %s/info
    '''%output).split())

  comm = petsc_comm_world()
  if comm.rank:
    Log.configure('bent tube',1,1,0)
  else:
    Log.cache_initial_output()
    Log.configure('bent tube',0,0,100)
    Log.copy_to_file(output+'/log',False)
    Log.write('command = %s'%parser.command(props))

  petsc_add_options([sys.argv[0]]+props.petsc().split())
  d = 3
  material = props.youngs_modulus(),props.poissons_ratio()
  rho_g = 0
  iga = NeoHookeanElastic[d](comm,material,rho_g)

  # Create geometry
  set_geometry(props,iga)

  # Finish setup
  iga.set_from_options()
  iga.set_up()

  # Boundary conditions
  x = iga.read_vec(boundary_file(props))
  dummy = 17 # Overwritten by set_fix_table below
  for axis in 0,2:
    for side in 0,1:
      for i in xrange(d):
        if axis==0:
          iga.set_boundary_value(axis,side,i,i)
  iga.set_fix_table(x)

  # Solve
  tao = iga.create_tao()
  iteration = [0]
  def monitor():
    i = iteration[0]
    name = os.path.join(output,'x.%d'%i)
    with Log.scope('write %d'%i):
      iga.write_vec(name,x)
      open(os.path.join(output,'last_frame'),'w').write('%d\n'%i)
    iteration[0] += 1
  tao.add_monitor(monitor)
  tao.set_from_options()
  tao.set_initial_vector(x)
  tao.solve()

def view(props):
  from igakit.io import PetIGA
  from igakit.nurbs import NURBS
  from igakit.plot import plt

  # Initialize
  output = props.output()
  frame = min(props.frame(),int(open(os.path.join(output,'last_frame')).read()))
  print('frame = %d'%frame)

  # Read geometry
  d = 3
  geom = PetIGA().read(geometry_file(props))
  print('geom.control.shape = %s'%(geom.control.shape,))
  assert geom.dim==d

  # Optionally replace geometry with solution
  if frame>=0:
    x = PetIGA().read_vec(os.path.join(output,'x.%d'%frame),nurbs=geom)
    print('x shape = %s'%(x.shape,))
    deformed = NURBS(knots=geom.knots,control=x)

  # Visualize
  plt.figure()
  if props.wire()>0:
    plt.kwire(deformed)
  if props.wire()>1:
    plt.cwire(deformed)
  if props.color()=='none':
    plt.surface(deformed)
  elif props.color()=='strain':
    # Evaluate strain everywhere in the volume, then set as a field for extraction purposes
    F = geom.gradient(fields=x,mapped=True)
    strain = maxmag(fast_singular_values(F)-1)
    strain_lo,strain_hi = strain.min(),strain.max()
    print('strain range: %g %g'%(strain_lo,strain_hi))
    strained = NURBS(knots=deformed.knots,control=deformed.control,fields=strain)

    # Modified from igakit.plot.Plotter.surface
    n = plt.backend._resolution[2]
    for nrb in surfaces(strained):
      u = [linspace(U[p],U[-p-1],n) for p,U in zip(nrb.degree,nrb.knots)]
      pos,strain = nrb(*u,fields=True)
      from mayavi import mlab
      m = mlab.mesh(*rollaxis(pos,-1),scalars=strain[...,0])
      m.module_manager.scalar_lut_manager.data_range = [strain_lo,strain_hi]
      m.module_manager.scalar_lut_manager.show_scalar_bar = True
  plt.show()

def surfaces(nurbs):
  assert nurbs.dim in (2,3)
  if nurbs.dim==2:
    return [nurbs]
  elif nurbs.dim==3:
    return [nurbs.boundary(axis,side) for axis in range(3) for side in range(2)]

if __name__=='__main__':
  props = make_props()
  parser.parse(props,'Bent tube')
  if props.view():
    print('command = %s'%parser.command(props))
    view(props)
  else:
    solve(props)
