#!/usr/bin/env python

from __future__ import division,print_function,absolute_import
from hollow import *
from geode import *
from geode.geometry.platonic import *
import sys
import re

def make_props(**kwargs):
  props = PropManager()
  props.add('dir','').set_abbrev('d').set_required(1)
  props.add('frame',0.).set(10000).set_help('frame to view')
  props.add('color','strain').set_allowed('none strain strain-lo strain-hi'.split()).set_help('color mode')
  props.add('wire',0).set_help('wireframeness: 0 for none, 1 for some, 2 for a lot')
  props.add('resolution',3).set_abbrev('n').set_help('ticks per basis function')
  props.add('view',Frame.identity(3))
  props.add('mode','mayavi').set_allowed('mayavi gui'.split())
  props.add('strain_range',zeros(2))
  for k,v in kwargs.items():
    props.get(k).set(v)
  return props

def geometry_file(props):
  return os.path.join(props.dir(),'geom.nurbs')

def view_dir(props):
  from igakit.io import PetIGA
  from igakit.nurbs import NURBS

  # Initialize
  dir = props.dir()
  frame = min(int(props.frame()),int(open(os.path.join(dir,'last_frame')).read()))
  print('frame = %d'%frame)

  # Read geometry
  d = 3
  geom = PetIGA().read(geometry_file(props))
  print('geom.control.shape = %s'%(geom.control.shape,))
  assert geom.dim==d

  # Optionally replace geometry with solution
  if frame>=0:
    x = PetIGA().read_vec(os.path.join(dir,'x.%d'%frame),nurbs=geom)
    print('x shape = %s'%(x.shape,))
    deformed = NURBS(knots=geom.knots,control=x)

  # Launch gui if desired
  mode = props.mode()
  if mode=='gui':
    import gui
    app = gui.QEApp(sys.argv,True)
    main = gui.MainWindow(props)
    main.view.cam.frame = props.view()

  # Visualize
  color = props.color()
  if mode=='mayavi':
    from igakit.plot import plt
    fig = plt.figure()
    fig.name = os.path.abspath(dir).replace(os.environ['HOME']+'/','')
    if props.wire()>0:
      plt.kwire(deformed)
    if props.wire()>1:
      plt.cwire(deformed)
    if color=='none':
      plt.surface(deformed)
  if color.startswith('strain'):
    # Evaluate strain everywhere in the volume, then set as a field for extraction purposes
    F = geom.gradient(fields=x,mapped=True)
    strain = fast_singular_values(F)-1
    strain = {'strain':maxmag(strain),'strain-lo':strain.min(axis=-1),'strain-hi':strain.max(axis=-1)}[color]
    strain_lo,strain_hi = strain.min(),strain.max()
    print('strain range: %g %g'%(strain_lo,strain_hi))
    if any(props.strain_range()):
      lo,hi = props.strain_range()
      assert min(lo,hi)<=strain_lo<=strain_hi<=max(lo,hi)
      strain_lo,strain_hi = lo,hi
    strained = NURBS(knots=deformed.knots,control=deformed.control,fields=strain)

    t = linspace(0,1,num=props.resolution(),endpoint=0)
    def subdivide(x):
      y = x[:,None]
      return concatenate([((1-t)*y[:-1]+t*y[1:]).ravel(),x[-1:]])

    for i,nrb in enumerate(surfaces(strained)):
      u = [subdivide(U[p:-p]) for p,U in zip(nrb.degree,nrb.knots)]
      pos,strain = nrb(*u,fields=True)
      if mode=='gui':
        class SurfaceScene(gui.Scene):
          def __init__(self,X,color):
            print('X.shape %s, color.shape %s'%(X.shape,color.shape))
            self.top = grid_topology(*(array(X.shape[:-1])-1))
            self.color = color.reshape(-1,3)
            self.X = X.reshape(-1,3)
          def bounding_box(self):
            return bounding_box(self.X)
          def render(self,*args):
            from OpenGL import GL
            tris = self.top.elements
            GL.glBegin(GL.GL_TRIANGLES)
            gui.gl_colored_vertices(self.color[tris],self.X[tris])
            GL.glEnd()
        print('adding scene %d'%i)
        color = (strain-strain_lo)/(strain_hi-strain_lo)
        color = wheel_color(2*color/3)
        main.view.add_scene('surface-%d'%i,SurfaceScene(pos,color))
      elif mode=='mayavi':
        from mayavi import mlab
        m = mlab.mesh(*rollaxis(pos,-1),scalars=strain[...,0])
        m.module_manager.scalar_lut_manager.data_range = [strain_lo,strain_hi]
        m.module_manager.scalar_lut_manager.show_scalar_bar = True
      else:
        raise RuntimeError('bad mode %s'%mode)

  if mode=='gui':
    def show_view():
      print('view = %s'%','.join(map(str,main.view.cam.frame.reals())))
    main.add_menu_item('Camera','Show view',show_view,'')
    main.init()
    main.view.show_all(1)
    app.run()
  elif mode=='mayavi':
    plt.show()
  else:
    raise RuntimeError('bad mode %s'%mode)

def read_vtk(path):
  f = open(path)

  def expect(line):
    got = f.next()
    if got[:-1] != line:
      raise RuntimeError('expected %s, got %s'%(repr(line),repr(got)))
  def read_array(*shape,**kwds):
    return fromstring(' '.join(f.next() for i in xrange(shape[0])),sep=' ',**kwds).reshape(*shape)

  expect('# vtk DataFile Version 2.0')
  f.next() # Skip description
  expect('ASCII')
  expect('DATASET UNSTRUCTURED_GRID')

  # Read rest positions
  m = re.match(r'^POINTS\s+(\d+)\s+double$',f.next())
  nv = int(m.group(1))
  X0 = read_array(nv,3)

  # Read mesh
  m = re.match(r'^CELLS\s+(\d+)\s+(\d+)$',f.next())
  nf = int(m.group(1))
  nfc = int(m.group(2))
  d = nfc//nf-2
  assert nfc==(d+2)*nf,'nv %d, d %d, nfc %d'%(nf,d,nfc)
  mesh = read_array(nf,d+2,dtype=int32)[:,1:].copy()

  # Check cell types
  expect('CELL_TYPES %d'%nf)
  read_array(nf,dtype=int32)

  # Read current positions
  expect('POINT_DATA %d'%nv)
  assert f.next().startswith('VECTORS ')
  X = read_array(nv,3)

  # All done?
  try:
    line = f.next()
    raise RuntimeError('expected EOF, got: %s'%line)
  except StopIteration:
    pass
  return X0,mesh,X

def view_vtk(props):
  X0,mesh,X = read_vtk(props.dir())
  d = mesh.shape[1]-1

  if d==2:
    soup = TriangleSoup(mesh)
    import gui
    class VtkScene(gui.Scene):
      def bounding_box(self):
        return bounding_box(X)
      def render(self,*pick):
        from OpenGL import GL
        GL.glColor([.3,.6,1])
        GL.glBegin(GL.GL_TRIANGLES)
        gui.gl_vertices(X[soup.elements])
        GL.glEnd()
        GL.glColor(zeros(3))
        GL.glBegin(GL.GL_LINES)
        gui.gl_vertices(X[soup.segment_soup().elements])
        GL.glEnd()
    app = gui.QEApp(sys.argv,True)
    main = gui.MainWindow(props)
    main.view.toggle_2d_mode(1)
    main.view.interaction_mode.set(gui.InteractionMode('flat'))
    main.view.interaction_mode().track = 0
    main.view.add_scene('vtk',VtkScene())
    main.view.show_all(True)
    main.init()
    app.run()

def surfaces(nurbs):
  assert nurbs.dim in (2,3)
  if nurbs.dim==2:
    return [nurbs]
  elif nurbs.dim==3:
    return [nurbs.boundary(axis,side) for axis in range(3) for side in range(2)]

if __name__=='__main__':
  props = make_props()
  parser.parse(props,'Hollow simulation viewer',positional=[props.dir])
  print('command = %s'%parser.command(props))
  if props.dir().endswith('.vtk'):
    view_vtk(props)
  elif os.path.isdir(props.dir()):
    view_dir(props)
